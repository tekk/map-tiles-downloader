name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-windows:
    name: Build Windows ${{ matrix.arch }} portable exe
    if: ${{ github.actor != 'nektos/act' }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x86_64
            runner: windows-latest
          - arch: arm64
            runner: windows-11-arm
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Build EXE
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install . pyinstaller
          pyinstaller map-tiles-downloader.spec
          New-Item -ItemType Directory -Force -Path build-out | Out-Null
          $ver = "${{ github.ref_name }}"
          Copy-Item "dist/map-tiles-downloader.exe" ("build-out/map-tiles-downloader-Windows-${{ matrix.arch }}-" + $ver + ".exe")
      - uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.arch }}-exe
          path: build-out/*

  build-macos:
    name: Build macOS DMG (${{ matrix.os }})
    if: ${{ github.actor != 'nektos/act' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, macos-14]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Build binary and DMG
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install . pyinstaller
          pyinstaller --onefile --name map-tiles-downloader --icon img/icon.png src/map_tiles_downloader/__main__.py
          ver="${{ github.ref_name }}"
          arch=$(uname -m)
          mkdir -p dmgroot build-out
          cp dist/map-tiles-downloader dmgroot/
          hdiutil create -volname "Map Tiles Downloader" -srcfolder dmgroot -ov -format UDZO "build-out/map-tiles-downloader-macOS-$arch-$ver.dmg"
      - uses: actions/upload-artifact@v4
        with:
          name: macos-dmg-${{ matrix.os }}
          path: build-out/*

  build-linux:
    name: Build Linux ${{ matrix.arch }} artifacts
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x86_64
            runner: ubuntu-latest
            fpm_arch: amd64
            rpm_arch: x86_64
            appimage_arch: x86_64
          - arch: arm64
            runner: ubuntu-24.04-arm
            fpm_arch: arm64
            rpm_arch: aarch64
            appimage_arch: aarch64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.arch }}-pip-${{ hashFiles('**/requirements.txt', 'pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-pip-

      - name: Cache PyInstaller
        uses: actions/cache@v4
        with:
          path: ~/.cache/pyinstaller
          key: ${{ runner.os }}-${{ matrix.arch }}-pyinstaller-${{ hashFiles('**/requirements.txt', 'pyproject.toml') }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential rpm wget xz-utils imagemagick

      - name: Install Ruby dependencies
        run: |
          sudo gem install --no-document fpm

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build with PyInstaller
        run: |
          pyinstaller --onefile --name map-tiles-downloader --icon img/icon.png src/map_tiles_downloader/__main__.py
        env:
          PYINSTALLER_CACHE_DIR: ~/.cache/pyinstaller

      - name: Extract version
        id: version
        run: |
          ref="${{ github.ref_name }}"
          version="${ref#v}"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Create output directory
        run: mkdir -p build-out

      - name: Copy binary
        run: cp dist/map-tiles-downloader build-out/map-tiles-downloader-Linux-${{ matrix.arch }}-${{ steps.version.outputs.version }}

      - name: Build AppImage
        run: |
          set -euo pipefail

          # Create AppDir structure
          mkdir -p AppDir/usr/bin
          cp dist/map-tiles-downloader AppDir/usr/bin/map-tiles-downloader

          # Create desktop file
          cat > AppDir/map-tiles-downloader.desktop << 'EOF'
          [Desktop Entry]
          Name=Map Tiles Downloader
          Exec=map-tiles-downloader
          Terminal=true
          Type=Application
          Categories=Utility;
          Icon=map-tiles-downloader
          EOF

          # Create icon
          cp img/icon.png AppDir/map-tiles-downloader.png

          # Create AppRun script
          cat > AppDir/AppRun << 'EOF'
          #!/bin/sh
          HERE="$(dirname "$(readlink -f "$0")")"
          exec "$HERE/usr/bin/map-tiles-downloader" "$@"
          EOF
          chmod +x AppDir/AppRun

          # Download and run appimagetool
          wget -q "https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-${{ matrix.appimage_arch }}.AppImage" -O appimagetool.AppImage
          chmod +x appimagetool.AppImage
          ./appimagetool.AppImage --appimage-extract
          ./squashfs-root/AppRun AppDir "build-out/map-tiles-downloader-Linux-${{ matrix.arch }}-${{ steps.version.outputs.version }}.AppImage"

          # Cleanup
          rm -rf AppDir appimagetool.AppImage squashfs-root

      - name: Build Debian package
        run: |
          fpm -s dir -t deb -n map-tiles-downloader \
              -v "${{ steps.version.outputs.version }}" \
              --license MIT \
              --architecture ${{ matrix.fpm_arch }} \
              --description "Download map tiles by region" \
              --package "build-out/map-tiles-downloader_${{ steps.version.outputs.version }}_${{ matrix.fpm_arch }}.deb" \
              dist/map-tiles-downloader=/usr/bin/map-tiles-downloader

      - name: Build RPM package
        run: |
          fpm -s dir -t rpm -n map-tiles-downloader \
              -v "${{ steps.version.outputs.version }}" \
              --license MIT \
              --architecture ${{ matrix.rpm_arch }} \
              --description "Download map tiles by region" \
              --package "build-out/map-tiles-downloader-${{ steps.version.outputs.version }}-1.${{ matrix.rpm_arch }}.rpm" \
              dist/map-tiles-downloader=/usr/bin/map-tiles-downloader

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}-artifacts
          path: build-out/*

  build-packages:
    name: Build sdist and wheel
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Build dists
        run: |
          python -m pip install --upgrade pip
          pip install build
          python -m build
      - name: Upload package artifacts
        if: ${{ github.actor != 'nektos/act' }}
        uses: actions/upload-artifact@v4
        with:
          name: python-dists
          path: dist/*

  release:
    name: Create GitHub Release
    # Skip release publishing when running locally under `act`
    if: ${{ github.actor != 'nektos/act' }}
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos, build-linux, build-packages]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          merge-multiple: true
      - name: Create Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          generate_release_notes: true
          files: |
            artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
